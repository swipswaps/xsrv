#!/bin/bash
set -o errexit
set -o nounset

# Configuration / defaults
venv_dir="${XSRV_VENV_DIR:=$HOME/.local/share/xsrv/venv}"
playbooks_dir="${XSRV_PLAYBOOKS_DIR:=$HOME/playbooks}"
templates_path="${XSRV_TEMPLATES_DIR:=/opt/xsrv}"
editor="${EDITOR:=nano}"
ansible_tags="${TAGS:-}"
git_branch="${BRANCH:-}"
skip_venv="${SKIP_VENV:=no}"
pager="${PAGER:=less}"
version="0.24.0"
ascii_banner="  ╻ ╻┏━┓┏━┓╻ ╻
░░╺╋╸┗━┓┣┳┛┃┏┛
  ╹ ╹┗━┛╹┗╸┗┛ v${version}"

# Functions
function check_playbook_exists() {
    # check that the directory for the specified playbook exists, exit with error if not
    export playbook_dir="$playbooks_dir/$playbook_name"
    if [[ ! -e "$playbook_dir" ]]; then
        echo "[xsrv] ERROR: playbook $playbook_dir does not exist"; exit 1;
    fi
}

function deploy() {
    # run ansible playbook
    echo "$ascii_banner"
    if [[ ! -z "$host_name" ]]; then ansible_host_arg="--limit=$host_name"; else ansible_host_arg=""; fi
    if [[ ! -z "$ansible_tags" ]]; then ansible_tags_arg="--tags=$ansible_tags"; else ansible_tags_arg=""; fi
    cd "$playbooks_dir/$playbook_name"
    echo "[xsrv] INFO: deploying playbook $playbook_name"
    ansible-playbook playbook.yml $ansible_tags_arg $ansible_host_arg
}

function check() {
    # run ansible playbook in check mode
    check_playbook_exists
    if [[ ! -z "$host_name" ]]; then ansible_host_arg="--limit=$host_name"; else ansible_host_arg=""; fi
    if [[ ! -z "$ansible_tags" ]]; then ansible_tags_arg="--tags=$ansible_tags"; else ansible_tags_arg=""; fi
    cd "$playbooks_dir/$playbook_name"
    echo "[xsrv] INFO: deploying playbook $playbook_name"
    ansible-playbook playbook.yml --check --diff $ansible_tags_arg $ansible_host_arg
}

function edit_playbook() {
    # edit a playbook file
    playbook_file="$playbooks_dir/$playbook_name/playbook.yml"
    echo "[xsrv] INFO: opening playbook file $playbook_file"
    $editor "$playbook_file"
}

function edit_inventory() {
    # edit an inventory file
    inventory_file="$playbooks_dir/$playbook_name/inventory.yml"
    echo "[xsrv] INFO: opening inventory file $inventory_file"
    $editor "$inventory_file"
}

function show_hosts() {
    # print contents of the inventory file
    inventory_file="$playbooks_dir/$playbook_name/inventory.yml"
    echo "[xsrv] INFO: opening inventory file $inventory_file"
    cat "$inventory_file"
}

function check_host_name() {
    if [[ -z "$host_name" ]]; then
        host_vars_dirs=$(find "$playbooks_dir/$playbook_name/host_vars/" -maxdepth 1 -type d)
        host_name="${host_vars_dirs##*/}"
        echo "[xsrv] DEBUG: host_vars_dirs: $host_vars_dirs"
        echo "[xsrv] INFO: no host name provided, using $host_name as host name"
        if [[ ! $(echo "$host_name" | wc -l) -eq 1 ]]; then
            echo "[xsrv] ERROR: no host name specified and multiple hosts found in playbook"; exit 1
        fi
    fi

    host_vars_file="$playbooks_dir/$playbook_name/host_vars/$host_name/$host_name.yml"
    host_vault_file="$playbooks_dir/$playbook_name/host_vars/$host_name/$host_name.vault.yml"

    if [[ ! -f "$host_vars_file" ]]; then
        echo "[xsrv] ERROR: $host_vars_file does not exist"; exit 1
    fi
}

function edit_host() {
    # edit a host's vars file
    check_playbook_exists
    check_host_name
    echo "[xsrv] INFO: opening host vars file $host_vars_file"
    $editor "$host_vars_file"
}


function edit_vault() {
    # edit a host's vault file
    check_playbook_exists
    check_host_name
    cd "$playbooks_dir/$playbook_name"
    EDITOR="$editor" ansible-vault edit "$host_vault_file"
}

function gen_vault_password_file() {
    # generate a random password for ansible-vault and store it in a file
    echo "[xsrv] INFO: Generating random password for ansible-vault"
    openssl rand -base64 32 > "$playbooks_dir/$playbook_name/.ansible-vault-password"
    echo "[xsrv] INFO: vault password stored in $playbooks_dir/$playbook_name/.ansible-vault-password"
    echo "[xsrv] INFO: Keep this file private! Keep backups of this file!"
}

function init_playbook() {
    # initialize a new playbook (default roles)
    export playbook_dir="$playbooks_dir/$playbook_name"

    echo "[xsrv] INFO: creating playbook $playbook_dir"
    if [[ -e "$playbook_dir" ]]; then
        echo "[xsrv] ERROR: $playbook_dir already exists"; exit 1
    fi
    mkdir "$playbook_dir"

    upgrade_roles
    echo "[xsrv] INFO: copying default playbook files and directories"
    cp -r "$playbook_dir/ansible_collections/nodiscc/xsrv/playbooks/xsrv/"{ansible.cfg,README.md,requirements.yml,backups/,data/,group_vars/,host_vars/,public/,secrets/} "$playbook_dir/"
    rm -r "$playbook_dir/host_vars/my.example.org"

    gen_vault_password_file


    init_host

    echo "[xsrv] INFO: playbook '$playbook_name' initialized"
    echo "[xsrv] INFO: run $0 deploy to apply configuration now, or $0 help for more options"
}

function init_host() {
    # add a new host to a playbook (from template files)
    check_playbook_exists

    until [[ ! -z "$host_name" ]]; do
        read -r -p "[xsrv] Host name to add to the $playbook_name playbook: " host_name
    done

    if [[ -e "$playbooks_dir/$playbook_name/host_vars/$host_name" ]]; then
        echo "[xsrv] ERROR: $playbooks_dir/$playbook_name/host_vars/$host_name already exists"; exit 1
    fi

    # TODO move inventory creation to init_playbook(), only handle adding a single host here
    # TODO echo "[xsrv] INFO: adding host $host_name to $playbook_name inventory"
    if [[ ! -f "$playbooks_dir/$playbook_name/inventory.yml" ]]; then
        sed "s/my.example.org/$host_name/g" "$templates_path/playbooks/xsrv/inventory.yml" >> "$playbooks_dir/$playbook_name/inventory.yml"
    else
        echo "    $host_name" >> "$playbooks_dir/$playbook_name/inventory.yml"
    fi

    echo "[xsrv] INFO: adding $host_name host to $playbook_name playbook"
    sed "s/my.example.org/$host_name/g" "$templates_path/playbooks/xsrv/playbook.yml" >> "$playbooks_dir/$playbook_name/playbook.yml"

    echo "[xsrv] INFO: creating host vars/vault files for $host_name"
    host_vars_file="$playbooks_dir/$playbook_name/host_vars/$host_name/$host_name.yml"
    host_vault_file="$playbooks_dir/$playbook_name/host_vars/$host_name/$host_name.vault.yml"
    mkdir "$playbooks_dir/$playbook_name/host_vars/$host_name"
    sed "s/my.example.org/$host_name/g" "$templates_path/playbooks/xsrv/host_vars/my.example.org/my.example.org.yml" > "$host_vars_file"
    sed "s/my.example.org/$host_name/g" "$templates_path/playbooks/xsrv/host_vars/my.example.org/my.example.org.vault.yml" > "$host_vault_file"

    if command -v pwgen >/dev/null; then
        echo "[xsrv] INFO: generating random passwords for $host_name"
        for i in 20 250 40 12 106 64 43 30; do
            random_password=$(pwgen -s "$i" 1);
            sed -i "s/CHANGEME$i/$random_password/g" "$host_vault_file"
        done
    else
        echo "[xsrv] WARNING: pwgen not installed, unable to generate random passwords for $host_name. Please manually replace any values labeled CHANGEME!"
    fi

    read -r -p "[xsrv] Press ENTER to edit the playbook (enable/disable roles)"
    edit_playbook "$playbook_name"
    read -r -p "[xsrv] Press ENTER to edit host variables (replace any values labeled CHANGEME) "
    edit_host "$playbook_name" "$host_name"

    echo "[xsrv] INFO: Encrypting secrets file"
    (cd "$playbooks_dir/$playbook_name/" && ansible-vault encrypt "$playbooks_dir/$playbook_name/host_vars/$host_name/$host_name.vault.yml")
    read -r -p "[xsrv] Press ENTER to edit secret (vaulted) host variables (replace any values labeled CHANGEME) "
    edit_vault "$playbook_name" "$host_name"
    echo "[xsrv] INFO: Host is ready for deployment. Run xsrv deploy $playbook_name $host_name"
}

function get_ssh_port() {
    # get SSH port from host_vars file
	ssh_port=$(grep "^ansible_ssh_port" "$host_vars_file" | cut -d ' ' -f 2 | tr -d \'\")
    if [[ -z "$ssh_port" ]]; then
        ssh_port=22
    fi
}

function get_ssh_user() {
    # get SSH user from vaulted host_vars file
    cd "$playbooks_dir/$playbook_name"
    vault_vars=$(ansible-vault decrypt --output - "$host_vault_file")
    ssh_user=$(echo "$vault_vars" | grep "^vault_ansible_user:" | cut -d ' ' -f 2 | tr -d \'\")

}

function run_shell() {
    # open a SSH shell on a host
    check_playbook_exists
    check_host_name
    get_ssh_port
    get_ssh_user

    ssh_command="ssh -t -p $ssh_port $ssh_user@$host_name $ssh_args"
    $ssh_command
}

function utils() {
    echo "TODO"
    exit 1
}

function info() {
    echo "TODO"
    exit 1
}

function fetch_backups() {
    # fetch latest daily backups from the host
    check_playbook_exists
    check_host_name
    get_ssh_port
    get_ssh_user

    backup_date=$(date "+%Y%m%d_%H%M%S")
    rsync_command="rsync --archive --verbose --rsh=\"ssh -p $ssh_port\" --progress --fake-super --rsync-path='/usr/bin/sudo /usr/bin/rsync' $ssh_user@$host_name:/var/backups/rsnapshot/daily.0/ $playbooks_dir/$playbook_name/backups/daily.0.$backup_date"
    echo "[xsrv] INFO: fetching latest daily backups from $host_name in playbook $playbook_name"
    echo "[xsrv] INFO: running $rsync_command"
    eval "$rsync_command"
}

function help() {
    echo "$usage"
    exit 1
}

function upgrade_roles() {
    check_playbook_exists
    if [[ ! -f "$playbook_dir"/requirements.yml ]]; then
        echo "[xsrv] INFO: installing default collection git+https://gitlab.com/nodiscc/xsrv,no-galaxy-deps"
        (cd "$playbook_dir" & ansible-galaxy collection install --force --collections-path "$playbook_dir/" git+https://gitlab.com/nodiscc/xsrv,release)
    else
        echo "[xsrv] INFO: upgrading collections from requirements.yml"
        (cd "$playbook_dir" & ansible-galaxy collection install --force -r requirements.yml)
    fi
}

function init_venv() {
    # create a virtualenv, activate it and install dependencies
    if [[ ! "$skip_venv" == "yes" ]]; then
        echo "[xsrv] INFO: creating virtualenv in $venv_dir"
        mkdir -p "$venv_dir"
        python3 -m venv "$venv_dir"
    fi
    source "$venv_dir/bin/activate"
    if [[ ! "$skip_venv" == "yes" ]]; then
        echo "[xsrv] INFO: installing ansible in $venv_dir"
        pip3 install wheel
        pip3 install ansible==2.10.5
    fi
}

function upgrade() {
    # upgrade the xsrv roles/template/bin directory from git,
    # upgrade the specifed playbook with latest roles
    cd "$templates_path"
    # optionally switch to env variable BRANCH before git pull
    if [[ ! -z "$git_branch" ]]; then
        echo "[xsrv] INFO: switching $templates_path/ to branch $git_branch"
        sudo git remote update
        sudo git checkout "$git_branch"
    fi
    echo "[xsrv] INFO: updating $templates_path/ from git"
    sudo git pull --ff-only
    upgrade_roles
    echo "[xsrv] INFO: installing $templates_path/xsrv script to /usr/local/bin/"
    sudo cp "$templates_path/xsrv" /usr/local/bin
}

function show_defaults() {
    role=${1:-}
    if [[ ! -z "$role" ]]; then
        $pager "$templates_path/roles/$role/defaults/main.yml"
    else
        # shellcheck disable=SC2002
        cat "$templates_path/roles/*/defaults/main.yml" | $pager
    fi
}

function _main() {
    if [[ -z "$command" ]]; then echo "[xsrv] ERROR: no command provided"; echo "$usage"; exit 1; fi
    case "$command" in
        "init-playbook") init_venv; shift; init_playbook ;;
        "init-host") init_venv; shift; init_host ;;
        "deploy") check_playbook_exists; init_venv; shift; deploy ;;
        "check") init_venv; shift; check ;;
        "edit-playbook") shift; edit_playbook ;;
        "edit-inventory") shift; edit_inventory ;;
        "edit-host") shift; edit_host ;;
        "edit-vault") init_venv; shift; edit_vault ;;
        "shell") init_venv; shift; run_shell ;;
        "logs") init_venv; shift; ssh_args="sudo lnav /var/log/syslog"; run_shell ;;
        "help") echo "$usage" ;;
        "fetch-backups") init_venv; shift; fetch_backups ;;
        "upgrade") upgrade ;;
        "show-hosts") shift; show_hosts ;;
        "show-defaults") shift; show_defaults "$@";;
        *) echo "[xsrv] ERROR: unrecognized command $command"; exit 1 ;;
    esac
}


############################"

# Usage
usage="$ascii_banner
USAGE: xsrv COMMAND [playbook] [host]
init-playbook   initialize a new playbook
init-host       add a new host to an existing playbook
deploy          deploy a playbook
check           simulate deployment, report what would be changed
edit-playbook   edit a playbook
edit-inventory  edit inventory file for a playbook
edit-host       edit a host vars file
edit-vault      edit a host vault file
shell           open an interactive shell on a host
logs            view system log on a host
help            show this message
fetch-backups   fetch backups from a host to the playbook backups directory
upgrade         upgrade roles to latest rversions
show-hosts      list hosts in a playbook/inventory
show-defaults   show all variables and their default values (accepts a role as argument)

The following environment variables are supported (usage: VARIABLE=VALUE xsrv COMMAND ...):
TAGS               comma-separated list of ansible tags (eg. TAGS=common,monitoring xsrv deploy)
BRANCH             (upgrade only) git branch/version to upgrade to (default: stay on current branch)
XSRV_TEMPLATES_DIR advanced: path to role/playbook templates (default: /opt/xsrv)
SKIP_VENV          advanced: skip installation of pip dependencies (yes/no, default: no)
EDITOR             text editor to use (default: nano)
PAGER              pager to use (default: less)
"

command="${1:-}"
playbook_name="${2:-default}"
host_name="${3:-}"
ssh_args=""
_main "$@"
